//------------------------------------------------------------------------
// 简称: TB_FINANALYSIS_EARNINGSQUALITY
// 名称: 盈利质量
// 类别: 公式应用
// 类型: 内建应用
//------------------------------------------------------------------------
Params
	Enum<String>    RepType(["季报","半年报","年报"]);//报告类型
	Numeric    		BackTimes(0);	  //报告期	0当期1上一期 以此类推 
	Numeric         dateshift(15);	  //报告偏移天数 比如季度报可能在统计日期之后15天才能拿到
Vars
	Dic<Array<Numeric>>		MyVar("TB_FINANALYSIS_EARNINGSQUALITY");
	Natural Map<Integer,Numeric> date2DicTime;
Defs
	Numeric getcurdate(Numeric readdate,Numeric remaintimes)
	{
		Numeric repdate;
		integer baryear=YearFromDateTime(readdate);
		integer barmonth=MonthFromDateTime(readdate);
		If(RepType=="年报")
			repdate=(baryear-1)*10000+1231;
		Else if(RepType=="半年报")
		{
			Numeric temp=intpart((barmonth-1)/6);
			repdate=iif(temp==0,baryear-1,baryear)*10000+iif(temp==0,12,6)*100+iif(temp==0,31,30);
		}
		Else If(RepType=="季报")
		{
			Numeric temp=intpart((barmonth-1)/3);
			repdate=iif(temp==0,baryear-1,baryear)*10000+iif(temp==0,12,temp*3)*100+iif(temp<2,31,30);
		}
		if(remaintimes==0)
			Return repdate;
		Else
			return getcurdate(repdate,remaintimes-1);
	}
Events
	OnReady()
	{
		Range[0:DataSourceSize()-1]
		{
			Array<Numeric> datearr;
			GetDicTimeRange(MyVar,datearr,0,SystemDateTime);
			Numeric i;
			for i=0 to GetArraySize(datearr)-1
			{
				Array<Numeric> tempvar;
				if(GetDicValue(MyVar,datearr[i],tempvar))
				{
					date2DicTime[intpart(utc2local(tempvar[0]))]=datearr[i];
				}
			}
		}
	}
	OnBar(ArrayRef<Integer> indexs)
	{
		Range[0:DataSourceSize()-1]
		{
			Array<Numeric> tempvar;
			Numeric dictime;
			Integer repdate=IntPart(getcurdate(DateAdd(date,(-1)*dateshift),backtimes));
			Commentary("repdate="+text(repdate));
			if(MapFind(date2DicTime,repdate,dictime))
			{
				GetDicValue(MyVar,dictime,tempvar);
				Commentary("读到的"+text(utc2local(tempvar[0])));
				PlotNumeric("报告时间",tempvar[0]);
				PlotNumeric("净资产收益率_平均_计算值(%)",tempvar[1]);
				PlotNumeric("净资产收益率_加权_公布值(%)",tempvar[2]);
				PlotNumeric("净资产收益率_摊薄_公布值(%)",tempvar[3]);
				PlotNumeric("净资产收益率_扣除_摊薄(%)",tempvar[4]);
				PlotNumeric("净资产收益率_扣除_加权(%)",tempvar[5]);
				PlotNumeric("净资产收益率_TTM(%)",tempvar[6]);
				PlotNumeric("总资产报酬率(%)",tempvar[7]);
				PlotNumeric("总资产报酬率_TTM(%)",tempvar[8]);
				PlotNumeric("总资产净利率(%)",tempvar[9]);
				PlotNumeric("总资产净利率_TTM(%)",tempvar[10]);
				PlotNumeric("投入资本回报率(%)",tempvar[11]);
				PlotNumeric("销售净利率(%)",tempvar[12]);
				PlotNumeric("销售净利率_TTM(%)",tempvar[13]);
				PlotNumeric("销售毛利率(%)",tempvar[14]);
				PlotNumeric("销售毛利率_TTM(%)",tempvar[15]);
				PlotNumeric("销售成本率(%)",tempvar[16]);
				PlotNumeric("销售期间费用率(%)",tempvar[17]);
				PlotNumeric("销售期间费用率_TTM(%)",tempvar[18]);
				PlotNumeric("净利润／营业总收入(%)",tempvar[19]);
				PlotNumeric("净利润／营业总收入_TTM(%)",tempvar[20]);
				PlotNumeric("营业利润／营业总收入(%)",tempvar[21]);
				PlotNumeric("营业利润／营业总收入_TTM(%)",tempvar[22]);
				PlotNumeric("息税前利润／营业总收入(%)",tempvar[23]);
				PlotNumeric("息税前利润／营业总收入_TTM(%)",tempvar[24]);
				PlotNumeric("营业总成本／营业总收入(%)",tempvar[25]);
				PlotNumeric("营业总成本／营业总收入_TTM(%)",tempvar[26]);
				PlotNumeric("销售费用／营业总收入(%)",tempvar[27]);
				PlotNumeric("销售费用／营业总收入_TTM(%)",tempvar[28]);
				PlotNumeric("管理费用／营业总收入(%)",tempvar[29]);
				PlotNumeric("管理费用／营业总收入_TTM(%)",tempvar[30]);
				PlotNumeric("财务费用／营业总收入(%)",tempvar[31]);
				PlotNumeric("财务费用／营业总收入_TTM(%)",tempvar[32]);
				PlotNumeric("资产减值损失／营业总收入(%)",tempvar[33]);
				PlotNumeric("资产减值损失／营业总收入_TTM(%)",tempvar[34]);
				PlotNumeric("归属母公司净利润(元)",tempvar[35]);
				PlotNumeric("扣除非经常性损益后的净利润(元)",tempvar[36]);
				PlotNumeric("息税前利润(元)",tempvar[37]);
				PlotNumeric("息税折旧摊销前利润(元)",tempvar[38]);
				PlotNumeric("营业利润率(%)",tempvar[39]);
				PlotNumeric("成本费用利润率(%)",tempvar[40]);
			}
		}
	}
//------------------------------------------------------------------------
// 编译版本	GS2021.04.16
// 版权所有	TradeBlazer Software 2003－2025
// 更改声明	TradeBlazer Software保留对TradeBlazer平
//			台每一版本的TradeBlazer公式修改和重写的权利
//------------------------------------------------------------------------